ZARYS OGÓLNY:
	Planowanie wykorzystanie API zwracające wyniki w JSON (linki do API doc):
	a) https://www.apixu.com/doc/current.aspx  [POGODA]
	b) https://darksky.net/dev/docs#forecast-request [POGODA]
	c) https://www.weatherbit.io/api/weather-current [POGODA]
	d) https://openweathermap.org/api [POGODA]
	e) https://aqicn.org/json-api/doc/ [ZANIECZYSZCZENIA]

	Rezerwowe:
	a) https://developer.climacell.co/docs [POGODA]

	W plikach CSV powinno znaleźć się mapwanie wyników pomiarów/prognoz wielkości fizycznych z odpowiednich pól odpowiedzi w formacie JSON


WSTĘPNIE ZAŁOŻONE WIELKOŚCI, JEDNOSTKI i TYPY:
	pressure [hPa] - weather
	humidity [%] - weather
	temperature [°C] - weather
	clouds [%] - weather
	wind-speed [m/s] - weather
	wind-direction [°] - weather
	rain [mm] - weather
	visibility [km] - weather
	uv [] - weather
	so2 [ppm] - pollution
	no2 [ppm] - pollution
	co [ppm] - pollution
	o3 [ppm] - pollution
	pm25 [ppm] - pollution
	pm10 [ppm] - pollution

	Możliwe dodatkowo:
	rain-hour [mm/h]
	temperature-feel [°C] - weather
	dewPoint [°C] - weather 



TODO
1. Stworzenie klasy  "weatherApis" do obslugi rożnych API, na podstawie definicji konfiguracji z plików CSV.
	Pola:
	url_search=""
    correct=0
    JSON=""
    config={}

	Metody:
	+print()
	+readConf()
	+getWeather()
	-__checkResult()
	+parseResult()
	+isCorrect()

	* Potrzeba uzgodnić(przeprowadzić konwersję jednostek)
	* obsługa błędów związanych z wykorzystaniem strony (status code HTTP, ale także inne wynikające z odpwiedzi z danego API np. brak miasta itp.)


2. Stworzenie klasy "factors" z danymi o jednostkach fizycznych(nazwa, jednostka, typ, wartość min, wartość max) w celu ułatwienia ujednolicenia(konwersji) jednostek 
   Metody do wypisywania infomracji o danej wielkości, sprawdzenie czy mieści się w przedziale <min;max>
   Dane ładowane z pliku units.csv - możliwość dodawania nowych wielkości bez zmian w kodzie
3. Utworzenie trybów a) pogoda obecna b) prognoza pogody 
4. Przekazywanie danych do programu w postaci argumentów: 
  w2e.py -mode=current --city="Gdynia"         - aktualna pogoda w Gdynia
  w2e.py -mode=forecast --city="Gdynia"        - prognoza pogody dla Gdyni
  w2e.py -mode=current --lon=19.23 --lat=54.23 - aktulna pogoda dla współrzędnych dł.geog. 19.23 i szer. geogr. 54.23 
  w2e.py -mode=forecast --lon=19.23--lat=54.23 - prognoza pogody dla współrzędnych dł.geog. 19.23 i szer. geogr. 54.23 
  w2e.py -mode=check_keys                      - weryfikacja kluczy/tokenów do API

  Alternatywnie (dodatkowo) przekazanie danych do programu w formie menu wyboru dla użytkownika

5. Obróbka danych pogodowych z tablicy wynikowej ( średnia,mediana, odchylenie standardowe)
6. Zapis wyników do Excela (do ustalenia co tam ma być zapisywane i jak)
 np. YYYY-MM-DD HH-MM <temeratura> <wilgotność> <prędkość wiatru> itp
7. Zamiana nazwy miasta na współrzędne geograficzne i odwrotnie (potrzebne dla API, które obsługują tylko jedną z tych opcji)
8. Walidacja danych wprowadzanych przez użytownika w  postaci argumentów programu: (lon/lat liczby,przedział), city(znaki)
9. Towrzenie pliku README.txt
10. Stworzenie metod pomocniczych wypisujących używane jednostki, dostępne i skonfigurowane API itp.
11. Stworzenie pliku z zaleznościami aplikacji i jego obługa ( w celu ułatwienia instalacji)
